substitutions:
  IN_RJ45_1: "7"
  IN_RJ45_2: "6"
  IN_RJ45_3: "5"
  IN_RJ45_4: "4"
  IN_RJ45_5: "3"
  IN_RJ45_6: "2"
  IN_RJ45_7: "1"
  IN_RJ45_8: "0"

  IN_RJ45_9: "8"
  IN_RJ45_10: "9"
  IN_RJ45_11: "10"
  IN_RJ45_12: "11"
  IN_RJ45_13: "12"
  IN_RJ45_14: "13"
  IN_RJ45_15: "14"
  IN_RJ45_16: "15"

  IN_RJ45_17: "7"
  IN_RJ45_18: "6"
  IN_RJ45_19: "5"
  IN_RJ45_20: "4"
  IN_RJ45_21: "3"
  IN_RJ45_22: "2"
  IN_RJ45_23: "1"
  IN_RJ45_24: "0"

  IN_RJ45_25: "8"
  IN_RJ45_26: "9"
  IN_RJ45_27: "10"
  IN_RJ45_28: "11"
  IN_RJ45_29: "12"
  IN_RJ45_30: "13"
  IN_RJ45_31: "14"
  IN_RJ45_32: "15"

  OUT_RJ45_1: "7"
  OUT_RJ45_2: "6"
  OUT_RJ45_3: "5"
  OUT_RJ45_4: "4"
  OUT_RJ45_5: "3"
  OUT_RJ45_6: "2"
  OUT_RJ45_7: "1"
  OUT_RJ45_8: "0"

  OUT_RJ45_9: "8"
  OUT_RJ45_10: "9"
  OUT_RJ45_11: "10"
  OUT_RJ45_12: "11"
  OUT_RJ45_13: "12"
  OUT_RJ45_14: "13"
  OUT_RJ45_15: "14"
  OUT_RJ45_16: "15"

  OUT_RJ45_17: "7"
  OUT_RJ45_18: "6"
  OUT_RJ45_19: "5"
  OUT_RJ45_20: "4"
  OUT_RJ45_21: "3"
  OUT_RJ45_22: "2"
  OUT_RJ45_23: "1"
  OUT_RJ45_24: "0"

  OUT_RJ45_25: "8"
  OUT_RJ45_26: "9"
  OUT_RJ45_27: "10"
  OUT_RJ45_28: "11"
  OUT_RJ45_29: "12"
  OUT_RJ45_30: "13"
  OUT_RJ45_31: "14"
  OUT_RJ45_32: "15"

  # serial_prefix: esp #Don't change it.

esphome:
  name: krishomelight
  friendly_name: KrisHomeLight
  # libraries:
  #   - EEPROM
  # on_boot:
  #   priority: -100
  #   then:
  #     - delay: 5s
  #     - lambda: |-
  #         float stored_position = id(eeprom_storage).read_position(0);
  #         id(cover1).position = stored_position;

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "BEqOF0qtQfbC6LIhC9nV/pkj7dXO4x3FLfaEZNDS6WY="

ota:
  - platform: esphome
    password: "e2789d68b00c626967b9b7a784bce4a2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Krishomelight Fallback Hotspot"
    password: "Lf8ri3xZq7OX"

captive_portal:

# ******************
# Moja konfiguracja
# ******************

# Konfiguracja I2C
i2c:
  sda: GPIO4  # D2 na płytce
  scl: GPIO5  # D1 na płytce
  frequency: 400kHz
  scan: true

# --- Załączenie Custom Component ---
external_components:
  - source:
      type: local # Lub 'git' jeśli umieścisz w repozytorium
      path: my_components # Ścieżka do folderu nadrzędnego komponentu
    components: [ at24c_eeprom ] # Nazwa komponentu (z namespace)

# --- Konfiguracja Komponentu EEPROM ---
component:
  - platform: at24c_eeprom
    id: eeprom_storage # ID do użycia w lambdach
    address: 0x50      # Adres I2C układu AT24C256 (sprawdź zworki A0-A2, domyślnie często 0x50)
                       # Adresy mogą być od 0x50 do 0x57

# Definicja czcionek
font:
  - file: 'arial.ttf'
    id: font_small
    size: 10
  - file: 'arial.ttf'
    id: font_large
    size: 16

# MCP23017
mcp23017:
  - id: 'mcp23017_in_1_16'
    address: 0x20
  - id: 'mcp23017_out_1_16'
    address: 0x21
  - id: 'mcp23017_in_2_32'
    address: 0x22
  - id: 'mcp23017_out_2_32'
    address: 0x23

# Obsługa wyświetlacza
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    reset_pin: GPIO2
    address: 0x3C
    update_interval: 1000ms # Aktualizacja co sekundę
    lambda: |-
      it.printf(0, 0, id(font_small), "IP: %s", id(ip_address).state.c_str());

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address

sensor:
  # Import sensorów przechowujących pozycję rolety
  # !include includes/covers_eeprom.yaml

switch:
  # Import przełączników
  !include includes/switches_blinds.yaml

cover:
  - platform: time_based
    name: Roleta salon taras
    id: cover_salon_taras
    open_action:
      - switch.turn_on: relay_salon_taras_up
    open_duration: 10s
    close_action:
      - switch.turn_on: relay_salon_taras_down
    close_duration: 9s
    stop_action:
      - switch.turn_off: relay_salon_taras_up
      - switch.turn_off: relay_salon_taras_down
      - lambda: |-
          ESP_LOGD("main", "Cover stopped, saving position.");
          float current_pos = id(cover_salon_taras).position;
          // Zapisz pozycję (float) pod adresem 0 w EEPROM
          // Drugi argument (0) to adres w pamięci EEPROM
          id(eeprom_storage).write_float(0, current_pos);

    # --- WAŻNE: Wyłącz stan assumed_state, bo będziemy go przywracać ---
    assumed_state: false
  # Import rolet
  # !include includes/covers.yaml
