substitutions:
  OUT_RJ45_1_1: "7"
  OUT_RJ45_1_2: "6"
  OUT_RJ45_1_3: "5"
  OUT_RJ45_1_4: "4"
  OUT_RJ45_1_5: "3"
  OUT_RJ45_1_6: "2"
  OUT_RJ45_1_7: "1"
  OUT_RJ45_1_8: "0"

  OUT_RJ45_2_1: "8"
  OUT_RJ45_2_2: "9"
  OUT_RJ45_2_3: "10"
  OUT_RJ45_2_4: "11"
  OUT_RJ45_2_5: "12"
  OUT_RJ45_2_6: "13"
  OUT_RJ45_2_7: "14"
  OUT_RJ45_2_8: "15"

  OUT_RJ45_3_1: "7"
  OUT_RJ45_3_2: "6"
  OUT_RJ45_3_3: "5"
  OUT_RJ45_3_4: "4"
  OUT_RJ45_3_5: "3"
  OUT_RJ45_3_6: "2"
  OUT_RJ45_3_7: "1"
  OUT_RJ45_3_8: "0"

  OUT_RJ45_4_1: "8"
  OUT_RJ45_4_2: "9"
  OUT_RJ45_4_3: "10"
  OUT_RJ45_4_4: "11"
  OUT_RJ45_4_5: "12"
  OUT_RJ45_4_6: "13"
  OUT_RJ45_4_7: "14"
  OUT_RJ45_4_8: "15"

  IN_RJ45_1_1: "7"
  IN_RJ45_1_2: "6"
  IN_RJ45_1_3: "5"
  IN_RJ45_1_4: "4"
  IN_RJ45_1_5: "3"
  IN_RJ45_1_6: "2"
  IN_RJ45_1_7: "1"
  IN_RJ45_1_8: "0"

  IN_RJ45_2_1: "8"
  IN_RJ45_2_2: "9"
  IN_RJ45_2_3: "10"
  IN_RJ45_2_4: "11"
  IN_RJ45_2_5: "12"
  IN_RJ45_2_6: "13"
  IN_RJ45_2_7: "14"
  IN_RJ45_2_8: "15"

  gpio_1: "GPIO12"

  # serial_prefix: esp #Don't change it.

esphome:
  name: krishomelight
  friendly_name: KrisHomeLight
  libraries:
    - EEPROM
  # on_boot:
  #   priority: -100
  #   then:
  #     - delay: 5s
  #     - lambda: |-
  #         float stored_position = id(eeprom_storage).read_position(0);
  #         id(cover1).position = stored_position;

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "BEqOF0qtQfbC6LIhC9nV/pkj7dXO4x3FLfaEZNDS6WY="

ota:
  - platform: esphome
    password: "e2789d68b00c626967b9b7a784bce4a2"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Krishomelight Fallback Hotspot"
    password: "Lf8ri3xZq7OX"

captive_portal:

# udp:
#   update_interval: 5s
#   encryption: 'ENCRYPTION1KEY' #set it to yours shared secret key
#   rolling_code_enable: true
#   binary_sensors:
#     - in_01
#   providers:
#     - name: termometr-ds18b20
#       encryption: 'ENCRYPTION2KEY' #set it to yours shared secret key

# ******************
# Moja konfiguracja
# ******************

# Konfiguracja I2C
i2c:
  sda: GPIO4  # D2 na płytce
  scl: GPIO5  # D1 na płytce
  scan: true

# Załadowanie biblioteki dla EEPROM AT24C256
# external_components:
#   - source: my_components
  
# at24c256_eeprom:
#   id: eeprom_storage

# Definicja czcionek
font:
  - file: 'arial.ttf'
    id: font_small
    size: 10
  - file: 'arial.ttf'
    id: font_large
    size: 16

# MCP23017
mcp23017:
  - id: 'mcp23017_out_1'
    address: 0x20
  - id: 'mcp23017_out_2'
    address: 0x21


# display: !include includes/display.yaml
# sensor: !include includes/sensors.yaml
# text_sensor: !include includes/text_sensors.yaml
# output: !include includes/outputs.yaml
# light: !include includes/lights.yaml
# switch: !include includes/switches.yaml
# binary_sensor: !include includes/binary_sensors.yaml
# cover: !include includes/covers.yaml

# Obsługa wyświetlacza
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32"
    reset_pin: GPIO2
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(font_small), "IP: %s", id(ip_address).state.c_str());
      it.printf(0, 10, id(font_small), "WiFi: %d dBm (%.0f%%)", 
                (int)id(wifi_signal_db).state, 
                id(wifi_signal_percent).state);
      int lights_on = 0;
      for (auto *light : App.get_lights()) {
        if (light->current_values.is_on()) {
          lights_on++;
        }
      }
      //int switches_on = 0;
      //for (auto *sw : App.get_switches()) {
      //  if (sw->state) {
      //    switches_on++;
      //  }
      //}
      //it.printf(0, 20, id(font_small), "Pozycja rolety: %.1f%%", id(cover1).position * 100);
      //it.printf(0, 20, id(font_small), "L: %d ON, S: %d ON", lights_on, switches_on);
      

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      id: ip_address

output:
  # Przekaźniki 1-8 (RJ45 Port 1)
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_1}
    id: relay_1

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_2}
    id: relay_2

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_3}
    id: relay_3

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_4}
    id: relay_4

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_5}
    id: relay_5

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_6}
    id: relay_6

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_7}
    id: relay_7

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_1_8}
    id: relay_8

# Przekaźniki 9-16 (RJ45 Port 2)
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_1}
    id: relay_9

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_2}
    id: relay_10

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_3}
    id: relay_11

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_4}
    id: relay_12

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_5}
    id: relay_13

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_6}
    id: relay_14

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_7}
    id: relay_15

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_1
      number: ${OUT_RJ45_2_8}
    id: relay_16

# Przekaźniki 17-24 (RJ45 Port 3)
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_1}
    id: relay_17

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_2}
    id: relay_18

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_3}
    id: relay_19

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_4}
    id: relay_20

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_5}
    id: relay_21

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_6}
    id: relay_22

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_7}
    id: relay_23

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_3_8}
    id: relay_24

# Przekaźniki 25-32 (RJ45 Port 4)
  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_1}
    id: relay_25

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_2}
    id: relay_26

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_3}
    id: relay_27

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_4}
    id: relay_28

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_5}
    id: relay_29

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_6}
    id: relay_30

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_7}
    id: relay_31

  - platform: gpio
    pin:
      mcp23xxx: mcp23017_out_2
      number: ${OUT_RJ45_4_8}
    id: relay_32

sensor:
  - platform: wifi_signal
    name: "Siła sygnału WiFi"
    update_interval: 60s
    id: wifi_signal_db

  - platform: copy
    source_id: wifi_signal_db
    id: wifi_signal_percent
    name: "Siła sygnału WiFi %"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"

  - platform: dht
    pin: GPIO14
    temperature:
      name: "Temperatura DTH11"
      id: dth11_temp_1  # ID dla sensora temperatury
    humidity:
      name: "Wilgotność DTH11"
      id: dth11_hum_1     # ID dla sensora wilgotności
    model: DHT11
    update_interval: 60s

  # - platform: template
  #   name: "Pozycja rolety z EEPROM"
  #   id: roleta_position_eeprom
  #   unit_of_measurement: "%"
  #   accuracy_decimals: 1
  #   lambda: |-
  #     return id(eeprom_storage).read_position(0) * 100.0;
  #   update_interval: 60s

binary_sensor:
  # - platform: gpio
  #   name: "Switch 1"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_1_1}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_press:
  #     then:
  #       - light.toggle: light_1
  
  # - platform: gpio
  #   name: "Switch 2"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_1_2}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_press:
  #     then:
  #       - light.toggle: light_1

  # - platform: gpio
  #   pin:
  #     number: GPIO12
  #     mode:
  #       input: true
  #       pullup: true
  #   name: "Przycisk GPIO12"
  #   id: button_gpio12
  #   filters:
  #     - invert:
  #   on_multi_click:
  #     - timing: # double click
  #         - ON for at most 1s
  #         - OFF for at most 0.5s
  #         - ON for at most 1s
  #         - OFF for at least 0.2s
  #       then:
  #         - light.toggle: light_2
  #         - logger.log: 'Double Click'
  #     - timing: # single click
  #         - ON for at most 1s
  #         - OFF for at least 0.5s
  #       then:
  #         - light.toggle: light_1
  #         - logger.log: 'Single Click'
  #     - timing: # long click
  #         - ON for at least 1.4s
  #       then:
  #         - light.toggle: light_3
  #         - logger.log: 'Long Click'

  
  # - platform: gpio
  #   name: "Switch 1"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_2_1}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_click:
  #     min_length: 50ms
  #     max_length: 350ms
  #     then:
  #       - logger.log: "Pojedyncze kliknięcie"
  #       - light.toggle: light_1
  #   on_double_click:
  #     min_length: 50ms
  #     max_length: 350ms
  #     then:
  #       - logger.log: "Podwójne kliknięcie"
  #   on_multi_click:
  #     - timing:
  #         - ON for at least 1000ms
  #       then:
  #         - logger.log: "Długie przytrzymanie"
    
  # - platform: gpio
  #   name: "Switch 2"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_2_2}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_press:
  #     then:
  #       - light.toggle: light_2

  # - platform: gpio
  #   name: "Switch 3"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_2_3}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_press:
  #     then:
  #       - light.toggle: light_3

  # - platform: gpio
  #   name: "Przycisk do bramy garażowej"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_2_4}
  #     mode:
  #       input: true
  #       pullup: true
  #   on_press:
  #     then:
  #       - switch.turn_on: relay_timed

light:
  - platform: binary
    name: "Light 01"
    output: relay_1
    id: light_1

  - platform: binary
    name: "Light 02"
    output: relay_2
    id: light_2

  - platform: binary
    name: "Light 03"
    output: relay_3
    id: light_3

  - platform: binary
    name: "Light 04"
    output: relay_4
    id: light_4

  - platform: binary
    name: "Light 05"
    output: relay_5
    id: light_5

  - platform: binary
    name: "Light 06"
    output: relay_6
    id: light_6

  - platform: binary
    name: "Light 07"
    output: relay_7
    id: light_7

  - platform: binary
    name: "Light 08"
    output: relay_8
    id: light_8

  - platform: binary
    name: "Light 09"
    output: relay_9
    id: light_9

  - platform: binary
    name: "Light 10"
    output: relay_10
    id: light_10

  - platform: binary
    name: "Light 11"
    output: relay_11
    id: light_11

  - platform: binary
    name: "Light 12"
    output: relay_12
    id: light_12

  - platform: binary
    name: "Light 13"
    output: relay_13
    id: light_13

  - platform: binary
    name: "Light 14"
    output: relay_14
    id: light_14

  - platform: binary
    name: "Light 15"
    output: relay_15
    id: light_15

  - platform: binary
    name: "Light 16"
    output: relay_16
    id: light_16
    
  - platform: binary
    name: "Light 17"
    output: relay_17
    id: light_17

  - platform: binary
    name: "Light 18"
    output: relay_18
    id: light_18

  - platform: binary
    name: "Light 19"
    output: relay_19
    id: light_19

  - platform: binary
    name: "Light 20"
    output: relay_20
    id: light_20

  - platform: binary
    name: "Light 21"
    output: relay_21
    id: light_21

  - platform: binary
    name: "Light 22"
    output: relay_22
    id: light_22

  - platform: binary
    name: "Light 23"
    output: relay_23
    id: light_23

  - platform: binary
    name: "Light 24"
    output: relay_24
    id: light_24

  - platform: binary
    name: "Light 25"
    output: relay_25
    id: light_25

  - platform: binary
    name: "Light 26"
    output: relay_26
    id: light_26

  - platform: binary
    name: "Light 27"
    output: relay_27
    id: light_27

  - platform: binary
    name: "Light 28"
    output: relay_28
    id: light_28

  - platform: binary
    name: "Light 29"
    output: relay_29
    id: light_29

  - platform: binary
    name: "Light 30"
    output: relay_30
    id: light_30

  - platform: binary
    name: "Light 31"
    output: relay_31
    id: light_31

  - platform: binary
    name: "Light 32"
    output: relay_32
    id: light_32


# switch:
  # - platform: gpio
  #   name: "Relay 1"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_1_4}
  #     mode: OUTPUT
  #     inverted: True
  #   id: relay_1

  # - platform: gpio
  #   name: "Przekaźnik czasowy do bramy garażowej 1s"
  #   pin:
  #     mcp23xxx: mcp23017_in
  #     number: ${OUT_RJ45_1_5}
  #     mode: OUTPUT
  #     inverted: True
  #   id: relay_timed
  #   on_turn_on:
  #     - delay: 1s
  #     - switch.turn_off: relay_timed
  
  # # Konfiguracja przekaźnika dla podnoszenia rolety
  # - platform: gpio
  #   name: "Rolety Gora"
  #   pin: 
  #     mcp23xxx: mcp23017_out  # Używamy ekspandera MCP23017
  #     number: ${OUT_RJ45_3_5}       # Numer pinu na ekspanderze (zdefiniowany w substitutions)
  #     mode: OUTPUT              # Pin ustawiony jako wyjście
  #   id: relay_up                # Unikalny identyfikator tego przełącznika
  #   inverted: True              # Odwrócona logika (True = przekaźnik wyłączony)
  #   internal: True              # Przełącznik nie będzie widoczny w Home Assistant
  #   interlock: [relay_down]     # Zapobiega jednoczesnej aktywacji z relay_down
  #   restore_mode: ALWAYS_OFF    # Zawsze wyłącz po restarcie dla bezpieczeństwa

  # # Konfiguracja przekaźnika dla opuszczania rolety
  # - platform: gpio
  #   name: "Rolety Dol"
  #   pin: 
  #     mcp23xxx: mcp23017_out  # Używamy tego samego ekspandera MCP23017
  #     number: ${OUT_RJ45_3_6}       # Inny numer pinu na ekspanderze
  #     mode: OUTPUT
  #   id: relay_down              # Unikalny identyfikator dla dolnego przekaźnika
  #   inverted: True
  #   internal: True
  #   interlock: [relay_up]       # Zapobiega jednoczesnej aktywacji z relay_up
  #   restore_mode: ALWAYS_OFF
  #   # Uwagi:
  #   # - Funkcja interlock automatycznie wyłącza przeciwny przekaźnik
  #   # - ALWAYS_OFF zapewnia, że przekaźniki są wyłączone po restarcie
  #   # - Inverted: True oznacza, że przekaźnik jest aktywny przy niskim stanie logicznym

  # - platform: gpio
  #   name: "Siłownik podłogówka"
  #   pin:
  #     mcp23xxx: mcp23017_out
  #     number: ${OUT_RJ45_3_4}
  #     mode: OUTPUT
  #     inverted: True
  #   id: living_room_floor

# cover:
#   - platform: time_based
#     name: "Roleta 1"
#     id: cover1
#     open_action:
#       - switch.turn_on: relay_up
#       - lambda: |-
#           id(eeprom_storage).update_position(0, 1.0);
#           id(roleta_position_eeprom).publish_state(100.0);
#     open_duration: 10s
#     close_action:
#       - switch.turn_on: relay_down
#       - lambda: |-
#           id(eeprom_storage).update_position(0, 0.0);
#           id(roleta_position_eeprom).publish_state(0.0);
#     close_duration: 8s
#     stop_action:
#       - switch.turn_off: relay_up
#       - switch.turn_off: relay_down
#       - lambda: |-
#           float current_position = id(cover1).position;
#           id(eeprom_storage).update_position(0, current_position);
#           id(roleta_position_eeprom).publish_state(current_position * 100.0);
#     assumed_state: False


# climate:
#   - platform: thermostat
#     name: "Termostat"
#     sensor: dth11_temp_1  # ID czujnika temperatury w pomieszczeniu
#     # Minimalne czasy pracy i przerwy dla stabilności systemu
#     min_heating_off_time: 30s  # Minimalny czas wyłączenia ogrzewania (5 minut)
#     min_heating_run_time: 30s  # Minimalny czas pracy ogrzewania (5 minut)
#     min_idle_time: 30s  # Minimalny czas bezczynności między cyklami (30 sekund)
#     # Akcje sterujące ogrzewaniem
#     heat_action:
#       - switch.turn_on: living_room_floor  # Włącz przekaźnik ogrzewania
#     idle_action:
#       - switch.turn_off: living_room_floor  # Wyłącz przekaźnik ogrzewania
#     # Ustawienia domyślne
#     default_preset: Home  # Domyślny tryb pracy
#     preset:
#       - name: Home
#         default_target_temperature_low: 22.5 °C  # Domyślna temperatura docelowa
#         mode: HEAT
#     heat_deadband: 0.3 °C # Histereza poniżej zadanej
#     heat_overrun: 0.3 °C # Histereza poniżej zadanej
